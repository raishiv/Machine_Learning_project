
outputFolder = fullfile('database');
% to get the folder containing the images into the outputfolder
rootFolder = outputFolder;
% to load all the different image sets into the imgSets folder
 imgSets = [ 
imageSet(fullfile(rootFolder, 'accordion')), ...
            imageSet(fullfile(rootFolder, 'airplanes')), ...
            imageSet(fullfile(rootFolder, 'anchor')),...
            imageSet(fullfile(rootFolder, 'ant')),...
            imageSet(fullfile(rootFolder, 'barrel')),...
            imageSet(fullfile(rootFolder, 'bass')),...
            imageSet(fullfile(rootFolder, 'beaver')),...
            imageSet(fullfile(rootFolder, 'binocular')),...
            imageSet(fullfile(rootFolder, 'bonsai')),...
            imageSet(fullfile(rootFolder, 'brain')),...
            imageSet(fullfile(rootFolder, 'brontosaurus')),...
            imageSet(fullfile(rootFolder, 'buddha')),...
            imageSet(fullfile(rootFolder, 'butterfly')),...
            imageSet(fullfile(rootFolder, 'camera')),...
            imageSet(fullfile(rootFolder, 'canon')),...
            imageSet(fullfile(rootFolder, 'car')),...
            imageSet(fullfile(rootFolder, 'ceilingfan')),...
            imageSet(fullfile(rootFolder, 'cellphone')),...
            imageSet(fullfile(rootFolder, 'chair')),...
            imageSet(fullfile(rootFolder, 'chandelier')),...
            imageSet(fullfile(rootFolder, 'cougar_body')),...
            imageSet(fullfile(rootFolder, 'cougar_face')),...
            imageSet(fullfile(rootFolder, 'crab')),...
            imageSet(fullfile(rootFolder, 'crayfish')),...
            imageSet(fullfile(rootFolder, 'crocodile')),...
            imageSet(fullfile(rootFolder, 'crocodile_head')),...
            imageSet(fullfile(rootFolder, 'cup')),...
            imageSet(fullfile(rootFolder, 'dalmatian')),...
            imageSet(fullfile(rootFolder, 'dollar_bill')),...
            imageSet(fullfile(rootFolder, 'dolphin')),...
            imageSet(fullfile(rootFolder, 'dragonfly')),...
            imageSet(fullfile(rootFolder, 'electric_guitar')),...
            imageSet(fullfile(rootFolder, 'elephant')),...
            imageSet(fullfile(rootFolder, 'emu')),...
            imageSet(fullfile(rootFolder, 'euphonium')),...
            imageSet(fullfile(rootFolder, 'ewer')),...
            imageSet(fullfile(rootFolder, 'faces')),...
            imageSet(fullfile(rootFolder, 'ferry')),...
            imageSet(fullfile(rootFolder, 'flamingo')),...
            imageSet(fullfile(rootFolder, 'flamingo_head')),...
            imageSet(fullfile(rootFolder, 'garfield')),...
            imageSet(fullfile(rootFolder, 'gerenuk')),...
            imageSet(fullfile(rootFolder, 'gramophone')),...
            imageSet(fullfile(rootFolder, 'grand_piano')),...
            imageSet(fullfile(rootFolder, 'hawksbill')),...
            imageSet(fullfile(rootFolder, 'headphone')),...
            imageSet(fullfile(rootFolder, 'hedgehog')),...
            imageSet(fullfile(rootFolder, 'helicopter')),...
            imageSet(fullfile(rootFolder, 'ibis')),...
            imageSet(fullfile(rootFolder, 'inline_skate')),...
            imageSet(fullfile(rootFolder, 'joshua_tree')),...
            imageSet(fullfile(rootFolder, 'kangaroo')),...
            imageSet(fullfile(rootFolder, 'ketch')),...
            imageSet(fullfile(rootFolder, 'lamp')),...
            imageSet(fullfile(rootFolder, 'laptop')),...
            imageSet(fullfile(rootFolder, 'leopards')),...
            imageSet(fullfile(rootFolder, 'llama')),...
            imageSet(fullfile(rootFolder, 'lobster')),...
            imageSet(fullfile(rootFolder, 'lotus')),...
            imageSet(fullfile(rootFolder, 'mandolin')),...
            imageSet(fullfile(rootFolder, 'mayfly')),...
            imageSet(fullfile(rootFolder, 'menorah')),...
            imageSet(fullfile(rootFolder, 'metronome')),...
            imageSet(fullfile(rootFolder, 'minaret')),...
            imageSet(fullfile(rootFolder, 'motorbikes')),...
            imageSet(fullfile(rootFolder, 'nautilus')),...
            imageSet(fullfile(rootFolder, 'octopus')),...
            imageSet(fullfile(rootFolder, 'okapi')),...
            imageSet(fullfile(rootFolder, 'pagoda')),...
            imageSet(fullfile(rootFolder, 'panda')),...
            imageSet(fullfile(rootFolder, 'pigeon')),...
            imageSet(fullfile(rootFolder, 'pizza')),...
            imageSet(fullfile(rootFolder, 'platypus')),...
            imageSet(fullfile(rootFolder, 'pyramid')),...
            imageSet(fullfile(rootFolder, 'revolver')),...
            imageSet(fullfile(rootFolder, 'rhino')),...
            imageSet(fullfile(rootFolder, 'rooster')),...
            imageSet(fullfile(rootFolder, 'saxophone')),...
            imageSet(fullfile(rootFolder, 'schooner')),...
            imageSet(fullfile(rootFolder, 'scissors')),...
            imageSet(fullfile(rootFolder, 'scorpion')),...
            imageSet(fullfile(rootFolder, 'sea_horse')),...
            imageSet(fullfile(rootFolder, 'snoopy')),...
            imageSet(fullfile(rootFolder, 'soccer_ball')),...
            imageSet(fullfile(rootFolder, 'stapler')),...
            imageSet(fullfile(rootFolder, 'starfish')),...
            imageSet(fullfile(rootFolder, 'stegosaurus')),...
            imageSet(fullfile(rootFolder, 'stop_sign')),...
            imageSet(fullfile(rootFolder, 'strawberry')),...
            imageSet(fullfile(rootFolder, 'sunflower')),...
            imageSet(fullfile(rootFolder, 'tick')),...
            imageSet(fullfile(rootFolder, 'trilobite')),...
            imageSet(fullfile(rootFolder, 'umbrella')),...
            imageSet(fullfile(rootFolder, 'watch')),...
            imageSet(fullfile(rootFolder, 'water_lilly')),...
            imageSet(fullfile(rootFolder, 'wheelchair')),...
            imageSet(fullfile(rootFolder, 'wild_cat')),...
            imageSet(fullfile(rootFolder, 'windsor_chair')),...
            imageSet(fullfile(rootFolder, 'wrench')),...
            imageSet(fullfile(rootFolder, 'yin_yang'))];
        
{imgSets.Description } % display all labels on one line
[imgSets.Count]      % show the corresponding count of images

minSetCount = min([imgSets.Count]); % determine the smallest amount of images in a category
% Use partition method to trim the set.
imgSets = partition(imgSets, minSetCount, 'randomize');

% Notice that each set now has exactly the same number of images.

%[imgSets.Count]
[trainingSets, validationSets] = partition(imgSets, 0.7, 'randomize');
size(trainingSets)
nfile = max(size(trainingSets)); % number of image files
a = trainingSets;


finalset = struct('category',{},'feature',{});
featureset = struct('name',{},'feature',{},'numoffeatures',{},'category',{});
% featureset = struct('feature',{});
index_image = 0;

%to load all the image features into matrices 
%featureset - used to load all the image files into one set
%finalset - contains all the different image sets into one to load into the
%kd tree clustering
%
for i=1:nfile 
imageSET = trainingSets(i);
imageSET.Description;
    for j =1:imageSET.Count
        ts = iscellstr(imageSET.ImageLocation(1,j));
        tf = char(imageSET.ImageLocation(1,j));
        I = imread(tf);
        if(size(I, 3) == 1)
            Z = I;
        else
            Z = rgb2gray(I);
        end
        points = detectSURFFeatures(Z);
        index_image = index_image + 1;
        [featureset(index_image).feature, points] = extractFeatures(Z, points);
        featureset(index_image).numoffeatures = size(featureset(index_image).feature,1);
        featureset(index_image).category = imageSET.Description;
     end
    finalset(i).category = imageSET.Description;
    finalset(i).feature =  double(vertcat(featureset.feature)); 
    
end


% kd tree implementation
combinedFeatureSet = vertcat(finalset.feature);
k = 200;
[clusterIndex, centroidVector] = kmeans(combinedFeatureSet, k);
kd = KDTreeSearcher(centroidVector);
save('KD','kd');


%histogram detection and application
k = size(centroidVector,1);
lengthTrainingImageSet = size(featureset,2);
indexTrainingImageSet = 1;
indexClusterTable = 1;
histo(k) = zeros;

%this is used to find the clusters to which the different features belong
%to and creating histograms for all the images
while indexClusterTable <= size(clusterIndex,1)
     if indexTrainingImageSet <= lengthTrainingImageSet  
        rowsToScan = featureset(indexTrainingImageSet).numoffeatures;
        while rowsToScan ~= 0
            index = clusterIndex(indexClusterTable);
            histo(index) = histo(index) + 1;
            rowsToScan = rowsToScan -1;
            indexClusterTable = indexClusterTable + 1;
        end
        histo = NormalizeHisto(histo, featureset(indexTrainingImageSet).numoffeatures);
        featureset(indexTrainingImageSet).bof = histo;
        histo(k) = zeros;
        indexTrainingImageSet = indexTrainingImageSet+1;
     else
         break;
     end    
end

%final bag of feature matrix by concatenating all the featureset.bof which
%contains all the images histogram for the input sets
bofAllImages = double(vertcat(featureset.bof));

plot(bofAllImages(1,1:200)')
plot(bofAllImages(2,1:200)')

